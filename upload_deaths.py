# -*- coding: utf-8 -*-
"""upload_deaths.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kxfa3idia8ph6Q0Av3H4d9PPVMuJCvTk
"""

import pandas as pd
import numpy as np
import mysql.connector
from mysql.connector import errorcode

# Configuration
csv_file_path = "E:\Portfolio\Sql\CovidVaccinations-cleaned.csv"  # Change this to the path of your CSV file
db_config = {
    'user': 'root',     # Change to your MySQL username
    'password': 'Rajesh@782', # Change to your MySQL password
    'host': 'localhost',
    'database': 'covid_analysis'  # Change to your MySQL database name
}
table_name = 'covidvaccinations'   # Change to your desired table name


# Read CSV file into DataFrame
df = pd.read_csv(csv_file_path)
df.replace('nan', np.nan, inplace=True)
# Replace NaN values with None
df.fillna(value=None, method="ffill")

# Replace 'nan' string values with None
df = df.map(lambda x: None if isinstance(x, str) and x.lower() == 'nan' else x)

# Establish MySQL connection
conn = mysql.connector.connect(**db_config)
cursor = conn.cursor()

# Generate CREATE TABLE statement
create_table_sql = f"CREATE TABLE {table_name} ("
for column_name, dtype in zip(df.columns, df.dtypes):
    if "int" in str(dtype):
        sql_dtype = "INT"
    elif "float" in str(dtype):
        sql_dtype = "FLOAT"
    elif "datetime" in str(dtype):
        sql_dtype = "DATETIME"
    else:
        sql_dtype = "VARCHAR(255)"
    create_table_sql += f"{column_name} {sql_dtype},"
create_table_sql = create_table_sql.rstrip(',') + ")"

# Create table
try:
    cursor.execute(create_table_sql)
    print(f"Table {table_name} created successfully.")
except mysql.connector.Error as err:
    if err.errno == errorcode.ER_TABLE_EXISTS_ERROR:
        print(f"Table {table_name} already exists.")
    else:
        print(err.msg)
        conn.close()
        exit(1)

# Load data into table
for index, row in df.iterrows():
    placeholders = ', '.join(['%s'] * len(row))
    columns = ', '.join(row.index)
    insert_sql = f"INSERT INTO {table_name} ({columns}) VALUES ({placeholders})"

    # Convert None values to NULL for MySQL
    row = [value if pd.notnull(value) else None for value in row]

    # Print the row to debug if it contains 'nan'
    print(row)  # Debug: Print the current row

    cursor.execute(insert_sql, tuple(row))
    if index % 1000 == 0:
        conn.commit()  # Commit every 1000 rows for efficiency
conn.commit()  # Final commit

# Close connection
cursor.close()
conn.close()

print("Data imported successfully.")